### This file was generated by Nexus Schema
### Do not make changes to this file directly


type addToCartInput {
  productId: Int
  quantity: Int
}

type AuthPayload {
  token: String
}

type Cart {
  cartLineItem(after: CartLineItemWhereUniqueInput, before: CartLineItemWhereUniqueInput, first: Int, last: Int): [CartLineItem!]!
  id: Int!
  userId: Int!
}

type CartLineItem {
  cartId: Int!
  id: Int!
  product: Product!
  productId: Int!
  quantity: Int!
}

input CartLineItemListRelationFilter {
  every: CartLineItemWhereInput
  none: CartLineItemWhereInput
  some: CartLineItemWhereInput
}

input CartLineItemWhereInput {
  AND: [CartLineItemWhereInput!]
  cart: CartWhereInput
  cartId: IntFilter
  createdDate: DateTimeFilter
  id: IntFilter
  lastModifiedDate: DateTimeFilter
  NOT: [CartLineItemWhereInput!]
  OR: [CartLineItemWhereInput!]
  product: ProductWhereInput
  productId: IntFilter
  quantity: IntFilter
}

input CartLineItemWhereUniqueInput {
  id: Int
}

input CartWhereInput {
  AND: [CartWhereInput!]
  cartLineItem: CartLineItemListRelationFilter
  createdDate: DateTimeFilter
  id: IntFilter
  lastModifiedDate: DateTimeFilter
  NOT: [CartWhereInput!]
  OR: [CartWhereInput!]
  userId: IntFilter
}

input CartWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  addToCart(productId: Int!, quantity: Int!): Cart
  createUser(email: String!, password: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Order {
  id: Int!
  orderLineItem(after: OrderLineItemWhereUniqueInput, before: OrderLineItemWhereUniqueInput, first: Int, last: Int): [OrderLineItem!]!
}

type OrderLineItem {
  id: Int!
  productId: Int!
  quantity: Int!
  totalPrice: Int!
  unitPrice: Int!
}

input OrderLineItemListRelationFilter {
  every: OrderLineItemWhereInput
  none: OrderLineItemWhereInput
  some: OrderLineItemWhereInput
}

input OrderLineItemWhereInput {
  AND: [OrderLineItemWhereInput!]
  createdDate: DateTimeFilter
  id: IntFilter
  lastModifiedDate: DateTimeFilter
  NOT: [OrderLineItemWhereInput!]
  OR: [OrderLineItemWhereInput!]
  order: OrderWhereInput
  orderId: IntFilter
  productId: IntFilter
  quantity: IntFilter
  totalPrice: IntFilter
  unitPrice: IntFilter
}

input OrderLineItemWhereUniqueInput {
  id: Int
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  createdDate: DateTimeFilter
  id: IntFilter
  lastModifiedDate: DateTimeFilter
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  orderLineItem: OrderLineItemListRelationFilter
}

input OrderWhereUniqueInput {
  id: Int
}

type Product {
  brand: String
  categoryId: Int!
  id: Int!
  image: String
  name: String!
  slug: String
  unitPrice: Int!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  brand: StringNullableFilter
  cart_line_item: CartLineItemListRelationFilter
  categoryId: IntFilter
  createdDate: DateTimeFilter
  description: StringNullableFilter
  id: IntFilter
  image: StringNullableFilter
  inventory: IntFilter
  lastModifiedDate: DateTimeFilter
  name: StringFilter
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  slug: StringNullableFilter
  unitPrice: IntFilter
}

input ProductWhereUniqueInput {
  id: Int
}

type Query {
  cart(where: CartWhereUniqueInput!): Cart
  carts(after: CartWhereUniqueInput, before: CartWhereUniqueInput, first: Int, last: Int, where: CartWhereInput): [Cart!]!
  order(where: OrderWhereUniqueInput!): Order
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int, where: OrderWhereInput): [Order!]!
  product(where: ProductWhereUniqueInput!): Product
  products(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int, where: ProductWhereInput): [Product!]!
  search(searchTerm: String!): [Product]
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, where: UserWhereInput): [User!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  firstName: String!
  id: Int!
  lastName: String!
  password: String!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdDate: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  id: IntFilter
  lastModifiedDate: DateTimeFilter
  lastName: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
